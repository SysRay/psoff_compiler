#include "debug_strings.h"

#include "opcodes_table.h"

#include <format>

namespace compiler::frontend::debug {
using namespace parser;

std::string_view getDebug(eOpcode op) {
  switch(op) {
    case eOpcode::DS_ADD_U32: return "DS_ADD_U32";
    case eOpcode::DS_SUB_U32: return "DS_SUB_U32";
    case eOpcode::DS_RSUB_U32: return "DS_RSUB_U32";
    case eOpcode::DS_INC_U32: return "DS_INC_U32";
    case eOpcode::DS_DEC_U32: return "DS_DEC_U32";
    case eOpcode::DS_MIN_I32: return "DS_MIN_I32";
    case eOpcode::DS_MAX_I32: return "DS_MAX_I32";
    case eOpcode::DS_MIN_U32: return "DS_MIN_U32";
    case eOpcode::DS_MAX_U32: return "DS_MAX_U32";
    case eOpcode::DS_AND_B32: return "DS_AND_B32";
    case eOpcode::DS_OR_B32: return "DS_OR_B32";
    case eOpcode::DS_XOR_B32: return "DS_XOR_B32";
    case eOpcode::DS_MSKOR_B32: return "DS_MSKOR_B32";
    case eOpcode::DS_WRITE_B32: return "DS_WRITE_B32";
    case eOpcode::DS_WRITE2_B32: return "DS_WRITE2_B32";
    case eOpcode::DS_WRITE2ST64_B32: return "DS_WRITE2ST64_B32";
    case eOpcode::DS_CMPST_B32: return "DS_CMPST_B32";
    case eOpcode::DS_CMPST_F32: return "DS_CMPST_F32";
    case eOpcode::DS_MIN_F32: return "DS_MIN_F32";
    case eOpcode::DS_MAX_F32: return "DS_MAX_F32";
    case eOpcode::DS_NOP: return "DS_NOP";
    case eOpcode::DS_GWS_SEMA_RELEASE_ALL: return "DS_GWS_SEMA_RELEASE_ALL";
    case eOpcode::DS_GWS_INIT: return "DS_GWS_INIT";
    case eOpcode::DS_GWS_SEMA_V: return "DS_GWS_SEMA_V";
    case eOpcode::DS_GWS_SEMA_BR: return "DS_GWS_SEMA_BR";
    case eOpcode::DS_GWS_SEMA_P: return "DS_GWS_SEMA_P";
    case eOpcode::DS_GWS_BARRIER: return "DS_GWS_BARRIER";
    case eOpcode::DS_WRITE_B8: return "DS_WRITE_B8";
    case eOpcode::DS_WRITE_B16: return "DS_WRITE_B16";
    case eOpcode::DS_ADD_RTN_U32: return "DS_ADD_RTN_U32";
    case eOpcode::DS_SUB_RTN_U32: return "DS_SUB_RTN_U32";
    case eOpcode::DS_RSUB_RTN_U32: return "DS_RSUB_RTN_U32";
    case eOpcode::DS_INC_RTN_U32: return "DS_INC_RTN_U32";
    case eOpcode::DS_DEC_RTN_U32: return "DS_DEC_RTN_U32";
    case eOpcode::DS_MIN_RTN_I32: return "DS_MIN_RTN_I32";
    case eOpcode::DS_MAX_RTN_I32: return "DS_MAX_RTN_I32";
    case eOpcode::DS_MIN_RTN_U32: return "DS_MIN_RTN_U32";
    case eOpcode::DS_MAX_RTN_U32: return "DS_MAX_RTN_U32";
    case eOpcode::DS_AND_RTN_B32: return "DS_AND_RTN_B32";
    case eOpcode::DS_OR_RTN_B32: return "DS_OR_RTN_B32";
    case eOpcode::DS_XOR_RTN_B32: return "DS_XOR_RTN_B32";
    case eOpcode::DS_MSKOR_RTN_B32: return "DS_MSKOR_RTN_B32";
    case eOpcode::DS_WRXCHG_RTN_B32: return "DS_WRXCHG_RTN_B32";
    case eOpcode::DS_WRXCHG2_RTN_B32: return "DS_WRXCHG2_RTN_B32";
    case eOpcode::DS_WRXCHG2ST64_RTN_B32: return "DS_WRXCHG2ST64_RTN_B32";
    case eOpcode::DS_CMPST_RTN_B32: return "DS_CMPST_RTN_B32";
    case eOpcode::DS_CMPST_RTN_F32: return "DS_CMPST_RTN_F32";
    case eOpcode::DS_MIN_RTN_F32: return "DS_MIN_RTN_F32";
    case eOpcode::DS_MAX_RTN_F32: return "DS_MAX_RTN_F32";
    case eOpcode::DS_WRAP_RTN_B32: return "DS_WRAP_RTN_B32";
    case eOpcode::DS_SWIZZLE_B32: return "DS_SWIZZLE_B32";
    case eOpcode::DS_READ_B32: return "DS_READ_B32";
    case eOpcode::DS_READ2_B32: return "DS_READ2_B32";
    case eOpcode::DS_READ2ST64_B32: return "DS_READ2ST64_B32";
    case eOpcode::DS_READ_I8: return "DS_READ_I8";
    case eOpcode::DS_READ_U8: return "DS_READ_U8";
    case eOpcode::DS_READ_I16: return "DS_READ_I16";
    case eOpcode::DS_READ_U16: return "DS_READ_U16";
    case eOpcode::DS_CONSUME: return "DS_CONSUME";
    case eOpcode::DS_APPEND: return "DS_APPEND";
    case eOpcode::DS_ORDERED_COUNT: return "DS_ORDERED_COUNT";
    case eOpcode::DS_ADD_U64: return "DS_ADD_U64";
    case eOpcode::DS_SUB_U64: return "DS_SUB_U64";
    case eOpcode::DS_RSUB_U64: return "DS_RSUB_U64";
    case eOpcode::DS_INC_U64: return "DS_INC_U64";
    case eOpcode::DS_DEC_U64: return "DS_DEC_U64";
    case eOpcode::DS_MIN_I64: return "DS_MIN_I64";
    case eOpcode::DS_MAX_I64: return "DS_MAX_I64";
    case eOpcode::DS_MIN_U64: return "DS_MIN_U64";
    case eOpcode::DS_MAX_U64: return "DS_MAX_U64";
    case eOpcode::DS_AND_B64: return "DS_AND_B64";
    case eOpcode::DS_OR_B64: return "DS_OR_B64";
    case eOpcode::DS_XOR_B64: return "DS_XOR_B64";
    case eOpcode::DS_MSKOR_B64: return "DS_MSKOR_B64";
    case eOpcode::DS_WRITE_B64: return "DS_WRITE_B64";
    case eOpcode::DS_WRITE2_B64: return "DS_WRITE2_B64";
    case eOpcode::DS_WRITE2ST64_B64: return "DS_WRITE2ST64_B64";
    case eOpcode::DS_CMPST_B64: return "DS_CMPST_B64";
    case eOpcode::DS_CMPST_F64: return "DS_CMPST_F64";
    case eOpcode::DS_MIN_F64: return "DS_MIN_F64";
    case eOpcode::DS_MAX_F64: return "DS_MAX_F64";
    case eOpcode::DS_ADD_RTN_U64: return "DS_ADD_RTN_U64";
    case eOpcode::DS_SUB_RTN_U64: return "DS_SUB_RTN_U64";
    case eOpcode::DS_RSUB_RTN_U64: return "DS_RSUB_RTN_U64";
    case eOpcode::DS_INC_RTN_U64: return "DS_INC_RTN_U64";
    case eOpcode::DS_DEC_RTN_U64: return "DS_DEC_RTN_U64";
    case eOpcode::DS_MIN_RTN_I64: return "DS_MIN_RTN_I64";
    case eOpcode::DS_MAX_RTN_I64: return "DS_MAX_RTN_I64";
    case eOpcode::DS_MIN_RTN_U64: return "DS_MIN_RTN_U64";
    case eOpcode::DS_MAX_RTN_U64: return "DS_MAX_RTN_U64";
    case eOpcode::DS_AND_RTN_B64: return "DS_AND_RTN_B64";
    case eOpcode::DS_OR_RTN_B64: return "DS_OR_RTN_B64";
    case eOpcode::DS_XOR_RTN_B64: return "DS_XOR_RTN_B64";
    case eOpcode::DS_MSKOR_RTN_B64: return "DS_MSKOR_RTN_B64";
    case eOpcode::DS_WRXCHG_RTN_B64: return "DS_WRXCHG_RTN_B64";
    case eOpcode::DS_WRXCHG2_RTN_B64: return "DS_WRXCHG2_RTN_B64";
    case eOpcode::DS_WRXCHG2ST64_RTN_B64: return "DS_WRXCHG2ST64_RTN_B64";
    case eOpcode::DS_CMPST_RTN_B64: return "DS_CMPST_RTN_B64";
    case eOpcode::DS_CMPST_RTN_F64: return "DS_CMPST_RTN_F64";
    case eOpcode::DS_MIN_RTN_F64: return "DS_MIN_RTN_F64";
    case eOpcode::DS_MAX_RTN_F64: return "DS_MAX_RTN_F64";
    case eOpcode::DS_READ_B64: return "DS_READ_B64";
    case eOpcode::DS_READ2_B64: return "DS_READ2_B64";
    case eOpcode::DS_READ2ST64_B64: return "DS_READ2ST64_B64";
    case eOpcode::DS_CONDXCHG32_RTN_B64: return "DS_CONDXCHG32_RTN_B64";
    case eOpcode::DS_ADD_SRC2_U32: return "DS_ADD_SRC2_U32";
    case eOpcode::DS_SUB_SRC2_U32: return "DS_SUB_SRC2_U32";
    case eOpcode::DS_RSUB_SRC2_U32: return "DS_RSUB_SRC2_U32";
    case eOpcode::DS_INC_SRC2_U32: return "DS_INC_SRC2_U32";
    case eOpcode::DS_DEC_SRC2_U32: return "DS_DEC_SRC2_U32";
    case eOpcode::DS_MIN_SRC2_I32: return "DS_MIN_SRC2_I32";
    case eOpcode::DS_MAX_SRC2_I32: return "DS_MAX_SRC2_I32";
    case eOpcode::DS_MIN_SRC2_U32: return "DS_MIN_SRC2_U32";
    case eOpcode::DS_MAX_SRC2_U32: return "DS_MAX_SRC2_U32";
    case eOpcode::DS_AND_SRC2_B32: return "DS_AND_SRC2_B32";
    case eOpcode::DS_OR_SRC2_B32: return "DS_OR_SRC2_B32";
    case eOpcode::DS_XOR_SRC2_B32: return "DS_XOR_SRC2_B32";
    case eOpcode::DS_WRITE_SRC2_B32: return "DS_WRITE_SRC2_B32";
    case eOpcode::DS_MIN_SRC2_F32: return "DS_MIN_SRC2_F32";
    case eOpcode::DS_MAX_SRC2_F32: return "DS_MAX_SRC2_F32";
    case eOpcode::DS_ADD_SRC2_U64: return "DS_ADD_SRC2_U64";
    case eOpcode::DS_SUB_SRC2_U64: return "DS_SUB_SRC2_U64";
    case eOpcode::DS_RSUB_SRC2_U64: return "DS_RSUB_SRC2_U64";
    case eOpcode::DS_INC_SRC2_U64: return "DS_INC_SRC2_U64";
    case eOpcode::DS_DEC_SRC2_U64: return "DS_DEC_SRC2_U64";
    case eOpcode::DS_MIN_SRC2_I64: return "DS_MIN_SRC2_I64";
    case eOpcode::DS_MAX_SRC2_I64: return "DS_MAX_SRC2_I64";
    case eOpcode::DS_MIN_SRC2_U64: return "DS_MIN_SRC2_U64";
    case eOpcode::DS_MAX_SRC2_U64: return "DS_MAX_SRC2_U64";
    case eOpcode::DS_AND_SRC2_B64: return "DS_AND_SRC2_B64";
    case eOpcode::DS_OR_SRC2_B64: return "DS_OR_SRC2_B64";
    case eOpcode::DS_XOR_SRC2_B64: return "DS_XOR_SRC2_B64";
    case eOpcode::DS_WRITE_SRC2_B64: return "DS_WRITE_SRC2_B64";
    case eOpcode::DS_MIN_SRC2_F64: return "DS_MIN_SRC2_F64";
    case eOpcode::DS_MAX_SRC2_F64: return "DS_MAX_SRC2_F64";
    case eOpcode::DS_WRITE_B96: return "DS_WRITE_B96";
    case eOpcode::DS_WRITE_B128: return "DS_WRITE_B128";
    case eOpcode::DS_CONDXCHG32_RTN_B128: return "DS_CONDXCHG32_RTN_B128";
    case eOpcode::DS_READ_B96: return "DS_READ_B96";
    case eOpcode::DS_READ_B128: return "DS_READ_B128";
    case eOpcode::EXP: return "EXP";
    case eOpcode::IMAGE_LOAD: return "IMAGE_LOAD";
    case eOpcode::IMAGE_LOAD_MIP: return "IMAGE_LOAD_MIP";
    case eOpcode::IMAGE_LOAD_PCK: return "IMAGE_LOAD_PCK";
    case eOpcode::IMAGE_LOAD_PCK_SGN: return "IMAGE_LOAD_PCK_SGN";
    case eOpcode::IMAGE_LOAD_MIP_PCK: return "IMAGE_LOAD_MIP_PCK";
    case eOpcode::IMAGE_LOAD_MIP_PCK_SGN: return "IMAGE_LOAD_MIP_PCK_SGN";
    case eOpcode::IMAGE_STORE: return "IMAGE_STORE";
    case eOpcode::IMAGE_STORE_MIP: return "IMAGE_STORE_MIP";
    case eOpcode::IMAGE_STORE_PCK: return "IMAGE_STORE_PCK";
    case eOpcode::IMAGE_STORE_MIP_PCK: return "IMAGE_STORE_MIP_PCK";
    case eOpcode::IMAGE_GET_RESINFO: return "IMAGE_GET_RESINFO";
    case eOpcode::IMAGE_ATOMIC_SWAP: return "IMAGE_ATOMIC_SWAP";
    case eOpcode::IMAGE_ATOMIC_CMPSWAP: return "IMAGE_ATOMIC_CMPSWAP";
    case eOpcode::IMAGE_ATOMIC_ADD: return "IMAGE_ATOMIC_ADD";
    case eOpcode::IMAGE_ATOMIC_SUB: return "IMAGE_ATOMIC_SUB";
    case eOpcode::IMAGE_ATOMIC_SMIN: return "IMAGE_ATOMIC_SMIN";
    case eOpcode::IMAGE_ATOMIC_UMIN: return "IMAGE_ATOMIC_UMIN";
    case eOpcode::IMAGE_ATOMIC_SMAX: return "IMAGE_ATOMIC_SMAX";
    case eOpcode::IMAGE_ATOMIC_UMAX: return "IMAGE_ATOMIC_UMAX";
    case eOpcode::IMAGE_ATOMIC_AND: return "IMAGE_ATOMIC_AND";
    case eOpcode::IMAGE_ATOMIC_OR: return "IMAGE_ATOMIC_OR";
    case eOpcode::IMAGE_ATOMIC_XOR: return "IMAGE_ATOMIC_XOR";
    case eOpcode::IMAGE_ATOMIC_INC: return "IMAGE_ATOMIC_INC";
    case eOpcode::IMAGE_ATOMIC_DEC: return "IMAGE_ATOMIC_DEC";
    case eOpcode::IMAGE_ATOMIC_FCMPSWAP: return "IMAGE_ATOMIC_FCMPSWAP";
    case eOpcode::IMAGE_ATOMIC_FMIN: return "IMAGE_ATOMIC_FMIN";
    case eOpcode::IMAGE_ATOMIC_FMAX: return "IMAGE_ATOMIC_FMAX";
    case eOpcode::IMAGE_SAMPLE: return "IMAGE_SAMPLE";
    case eOpcode::IMAGE_SAMPLE_CL: return "IMAGE_SAMPLE_CL";
    case eOpcode::IMAGE_SAMPLE_D: return "IMAGE_SAMPLE_D";
    case eOpcode::IMAGE_SAMPLE_D_CL: return "IMAGE_SAMPLE_D_CL";
    case eOpcode::IMAGE_SAMPLE_L: return "IMAGE_SAMPLE_L";
    case eOpcode::IMAGE_SAMPLE_B: return "IMAGE_SAMPLE_B";
    case eOpcode::IMAGE_SAMPLE_B_CL: return "IMAGE_SAMPLE_B_CL";
    case eOpcode::IMAGE_SAMPLE_LZ: return "IMAGE_SAMPLE_LZ";
    case eOpcode::IMAGE_SAMPLE_C: return "IMAGE_SAMPLE_C";
    case eOpcode::IMAGE_SAMPLE_C_CL: return "IMAGE_SAMPLE_C_CL";
    case eOpcode::IMAGE_SAMPLE_C_D: return "IMAGE_SAMPLE_C_D";
    case eOpcode::IMAGE_SAMPLE_C_D_CL: return "IMAGE_SAMPLE_C_D_CL";
    case eOpcode::IMAGE_SAMPLE_C_L: return "IMAGE_SAMPLE_C_L";
    case eOpcode::IMAGE_SAMPLE_C_B: return "IMAGE_SAMPLE_C_B";
    case eOpcode::IMAGE_SAMPLE_C_B_CL: return "IMAGE_SAMPLE_C_B_CL";
    case eOpcode::IMAGE_SAMPLE_C_LZ: return "IMAGE_SAMPLE_C_LZ";
    case eOpcode::IMAGE_SAMPLE_O: return "IMAGE_SAMPLE_O";
    case eOpcode::IMAGE_SAMPLE_CL_O: return "IMAGE_SAMPLE_CL_O";
    case eOpcode::IMAGE_SAMPLE_D_O: return "IMAGE_SAMPLE_D_O";
    case eOpcode::IMAGE_SAMPLE_D_CL_O: return "IMAGE_SAMPLE_D_CL_O";
    case eOpcode::IMAGE_SAMPLE_L_O: return "IMAGE_SAMPLE_L_O";
    case eOpcode::IMAGE_SAMPLE_B_O: return "IMAGE_SAMPLE_B_O";
    case eOpcode::IMAGE_SAMPLE_B_CL_O: return "IMAGE_SAMPLE_B_CL_O";
    case eOpcode::IMAGE_SAMPLE_LZ_O: return "IMAGE_SAMPLE_LZ_O";
    case eOpcode::IMAGE_SAMPLE_C_O: return "IMAGE_SAMPLE_C_O";
    case eOpcode::IMAGE_SAMPLE_C_CL_O: return "IMAGE_SAMPLE_C_CL_O";
    case eOpcode::IMAGE_SAMPLE_C_D_O: return "IMAGE_SAMPLE_C_D_O";
    case eOpcode::IMAGE_SAMPLE_C_D_CL_O: return "IMAGE_SAMPLE_C_D_CL_O";
    case eOpcode::IMAGE_SAMPLE_C_L_O: return "IMAGE_SAMPLE_C_L_O";
    case eOpcode::IMAGE_SAMPLE_C_B_O: return "IMAGE_SAMPLE_C_B_O";
    case eOpcode::IMAGE_SAMPLE_C_B_CL_O: return "IMAGE_SAMPLE_C_B_CL_O";
    case eOpcode::IMAGE_SAMPLE_C_LZ_O: return "IMAGE_SAMPLE_C_LZ_O";
    case eOpcode::IMAGE_GATHER4: return "IMAGE_GATHER4";
    case eOpcode::IMAGE_GATHER4_CL: return "IMAGE_GATHER4_CL";
    case eOpcode::IMAGE_GATHER4_L: return "IMAGE_GATHER4_L";
    case eOpcode::IMAGE_GATHER4_B: return "IMAGE_GATHER4_B";
    case eOpcode::IMAGE_GATHER4_B_CL: return "IMAGE_GATHER4_B_CL";
    case eOpcode::IMAGE_GATHER4_LZ: return "IMAGE_GATHER4_LZ";
    case eOpcode::IMAGE_GATHER4_C: return "IMAGE_GATHER4_C";
    case eOpcode::IMAGE_GATHER4_C_CL: return "IMAGE_GATHER4_C_CL";
    case eOpcode::IMAGE_GATHER4_C_L: return "IMAGE_GATHER4_C_L";
    case eOpcode::IMAGE_GATHER4_C_B: return "IMAGE_GATHER4_C_B";
    case eOpcode::IMAGE_GATHER4_C_B_CL: return "IMAGE_GATHER4_C_B_CL";
    case eOpcode::IMAGE_GATHER4_C_LZ: return "IMAGE_GATHER4_C_LZ";
    case eOpcode::IMAGE_GATHER4_O: return "IMAGE_GATHER4_O";
    case eOpcode::IMAGE_GATHER4_CL_O: return "IMAGE_GATHER4_CL_O";
    case eOpcode::IMAGE_GATHER4_L_O: return "IMAGE_GATHER4_L_O";
    case eOpcode::IMAGE_GATHER4_B_O: return "IMAGE_GATHER4_B_O";
    case eOpcode::IMAGE_GATHER4_B_CL_O: return "IMAGE_GATHER4_B_CL_O";
    case eOpcode::IMAGE_GATHER4_LZ_O: return "IMAGE_GATHER4_LZ_O";
    case eOpcode::IMAGE_GATHER4_C_O: return "IMAGE_GATHER4_C_O";
    case eOpcode::IMAGE_GATHER4_C_CL_O: return "IMAGE_GATHER4_C_CL_O";
    case eOpcode::IMAGE_GATHER4_C_L_O: return "IMAGE_GATHER4_C_L_O";
    case eOpcode::IMAGE_GATHER4_C_B_O: return "IMAGE_GATHER4_C_B_O";
    case eOpcode::IMAGE_GATHER4_C_B_CL_O: return "IMAGE_GATHER4_C_B_CL_O";
    case eOpcode::IMAGE_GATHER4_C_LZ_O: return "IMAGE_GATHER4_C_LZ_O";
    case eOpcode::IMAGE_GET_LOD: return "IMAGE_GET_LOD";
    case eOpcode::IMAGE_SAMPLE_CD: return "IMAGE_SAMPLE_CD";
    case eOpcode::IMAGE_SAMPLE_CD_CL: return "IMAGE_SAMPLE_CD_CL";
    case eOpcode::IMAGE_SAMPLE_C_CD: return "IMAGE_SAMPLE_C_CD";
    case eOpcode::IMAGE_SAMPLE_C_CD_CL: return "IMAGE_SAMPLE_C_CD_CL";
    case eOpcode::IMAGE_SAMPLE_CD_O: return "IMAGE_SAMPLE_CD_O";
    case eOpcode::IMAGE_SAMPLE_CD_CL_O: return "IMAGE_SAMPLE_CD_CL_O";
    case eOpcode::IMAGE_SAMPLE_C_CD_O: return "IMAGE_SAMPLE_C_CD_O";
    case eOpcode::IMAGE_SAMPLE_C_CD_CL_O: return "IMAGE_SAMPLE_C_CD_CL_O";
    case eOpcode::TBUFFER_LOAD_FORMAT_X: return "TBUFFER_LOAD_FORMAT_X";
    case eOpcode::TBUFFER_LOAD_FORMAT_XY: return "TBUFFER_LOAD_FORMAT_XY";
    case eOpcode::TBUFFER_LOAD_FORMAT_XYZ: return "TBUFFER_LOAD_FORMAT_XYZ";
    case eOpcode::TBUFFER_LOAD_FORMAT_XYZW: return "TBUFFER_LOAD_FORMAT_XYZW";
    case eOpcode::TBUFFER_STORE_FORMAT_X: return "TBUFFER_STORE_FORMAT_X";
    case eOpcode::TBUFFER_STORE_FORMAT_XY: return "TBUFFER_STORE_FORMAT_XY";
    case eOpcode::TBUFFER_STORE_FORMAT_XYZ: return "TBUFFER_STORE_FORMAT_XYZ";
    case eOpcode::TBUFFER_STORE_FORMAT_XYZW: return "TBUFFER_STORE_FORMAT_XYZW";
    case eOpcode::BUFFER_LOAD_FORMAT_X: return "BUFFER_LOAD_FORMAT_X";
    case eOpcode::BUFFER_LOAD_FORMAT_XY: return "BUFFER_LOAD_FORMAT_XY";
    case eOpcode::BUFFER_LOAD_FORMAT_XYZ: return "BUFFER_LOAD_FORMAT_XYZ";
    case eOpcode::BUFFER_LOAD_FORMAT_XYZW: return "BUFFER_LOAD_FORMAT_XYZW";
    case eOpcode::BUFFER_STORE_FORMAT_X: return "BUFFER_STORE_FORMAT_X";
    case eOpcode::BUFFER_STORE_FORMAT_XY: return "BUFFER_STORE_FORMAT_XY";
    case eOpcode::BUFFER_STORE_FORMAT_XYZ: return "BUFFER_STORE_FORMAT_XYZ";
    case eOpcode::BUFFER_STORE_FORMAT_XYZW: return "BUFFER_STORE_FORMAT_XYZW";
    case eOpcode::BUFFER_LOAD_UBYTE: return "BUFFER_LOAD_UBYTE";
    case eOpcode::BUFFER_LOAD_SBYTE: return "BUFFER_LOAD_SBYTE";
    case eOpcode::BUFFER_LOAD_USHORT: return "BUFFER_LOAD_USHORT";
    case eOpcode::BUFFER_LOAD_SSHORT: return "BUFFER_LOAD_SSHORT";
    case eOpcode::BUFFER_LOAD_DWORD: return "BUFFER_LOAD_DWORD";
    case eOpcode::BUFFER_LOAD_DWORDX2: return "BUFFER_LOAD_DWORDX2";
    case eOpcode::BUFFER_LOAD_DWORDX4: return "BUFFER_LOAD_DWORDX4";
    case eOpcode::BUFFER_LOAD_DWORDX3: return "BUFFER_LOAD_DWORDX3";
    case eOpcode::BUFFER_STORE_BYTE: return "BUFFER_STORE_BYTE";
    case eOpcode::BUFFER_STORE_SHORT: return "BUFFER_STORE_SHORT";
    case eOpcode::BUFFER_STORE_DWORD: return "BUFFER_STORE_DWORD";
    case eOpcode::BUFFER_STORE_DWORDX2: return "BUFFER_STORE_DWORDX2";
    case eOpcode::BUFFER_STORE_DWORDX4: return "BUFFER_STORE_DWORDX4";
    case eOpcode::BUFFER_STORE_DWORDX3: return "BUFFER_STORE_DWORDX3";
    case eOpcode::BUFFER_ATOMIC_SWAP: return "BUFFER_ATOMIC_SWAP";
    case eOpcode::BUFFER_ATOMIC_CMPSWAP: return "BUFFER_ATOMIC_CMPSWAP";
    case eOpcode::BUFFER_ATOMIC_ADD: return "BUFFER_ATOMIC_ADD";
    case eOpcode::BUFFER_ATOMIC_SUB: return "BUFFER_ATOMIC_SUB";
    case eOpcode::BUFFER_ATOMIC_SMIN: return "BUFFER_ATOMIC_SMIN";
    case eOpcode::BUFFER_ATOMIC_UMIN: return "BUFFER_ATOMIC_UMIN";
    case eOpcode::BUFFER_ATOMIC_SMAX: return "BUFFER_ATOMIC_SMAX";
    case eOpcode::BUFFER_ATOMIC_UMAX: return "BUFFER_ATOMIC_UMAX";
    case eOpcode::BUFFER_ATOMIC_AND: return "BUFFER_ATOMIC_AND";
    case eOpcode::BUFFER_ATOMIC_OR: return "BUFFER_ATOMIC_OR";
    case eOpcode::BUFFER_ATOMIC_XOR: return "BUFFER_ATOMIC_XOR";
    case eOpcode::BUFFER_ATOMIC_INC: return "BUFFER_ATOMIC_INC";
    case eOpcode::BUFFER_ATOMIC_DEC: return "BUFFER_ATOMIC_DEC";
    case eOpcode::BUFFER_ATOMIC_FCMPSWAP: return "BUFFER_ATOMIC_FCMPSWAP";
    case eOpcode::BUFFER_ATOMIC_FMIN: return "BUFFER_ATOMIC_FMIN";
    case eOpcode::BUFFER_ATOMIC_FMAX: return "BUFFER_ATOMIC_FMAX";
    case eOpcode::BUFFER_ATOMIC_SWAP_X2: return "BUFFER_ATOMIC_SWAP_X2";
    case eOpcode::BUFFER_ATOMIC_CMPSWAP_X2: return "BUFFER_ATOMIC_CMPSWAP_X2";
    case eOpcode::BUFFER_ATOMIC_ADD_X2: return "BUFFER_ATOMIC_ADD_X2";
    case eOpcode::BUFFER_ATOMIC_SUB_X2: return "BUFFER_ATOMIC_SUB_X2";
    case eOpcode::BUFFER_ATOMIC_SMIN_X2: return "BUFFER_ATOMIC_SMIN_X2";
    case eOpcode::BUFFER_ATOMIC_UMIN_X2: return "BUFFER_ATOMIC_UMIN_X2";
    case eOpcode::BUFFER_ATOMIC_SMAX_X2: return "BUFFER_ATOMIC_SMAX_X2";
    case eOpcode::BUFFER_ATOMIC_UMAX_X2: return "BUFFER_ATOMIC_UMAX_X2";
    case eOpcode::BUFFER_ATOMIC_AND_X2: return "BUFFER_ATOMIC_AND_X2";
    case eOpcode::BUFFER_ATOMIC_OR_X2: return "BUFFER_ATOMIC_OR_X2";
    case eOpcode::BUFFER_ATOMIC_XOR_X2: return "BUFFER_ATOMIC_XOR_X2";
    case eOpcode::BUFFER_ATOMIC_INC_X2: return "BUFFER_ATOMIC_INC_X2";
    case eOpcode::BUFFER_ATOMIC_DEC_X2: return "BUFFER_ATOMIC_DEC_X2";
    case eOpcode::BUFFER_ATOMIC_FCMPSWAP_X2: return "BUFFER_ATOMIC_FCMPSWAP_X2";
    case eOpcode::BUFFER_ATOMIC_FMIN_X2: return "BUFFER_ATOMIC_FMIN_X2";
    case eOpcode::BUFFER_ATOMIC_FMAX_X2: return "BUFFER_ATOMIC_FMAX_X2";
    case eOpcode::BUFFER_WBINVL1_SC: return "BUFFER_WBINVL1_SC";
    case eOpcode::BUFFER_WBINVL1: return "BUFFER_WBINVL1";
    case eOpcode::S_LOAD_DWORD: return "S_LOAD_DWORD";
    case eOpcode::S_LOAD_DWORDX2: return "S_LOAD_DWORDX2";
    case eOpcode::S_LOAD_DWORDX4: return "S_LOAD_DWORDX4";
    case eOpcode::S_LOAD_DWORDX8: return "S_LOAD_DWORDX8";
    case eOpcode::S_LOAD_DWORDX16: return "S_LOAD_DWORDX16";
    case eOpcode::S_BUFFER_LOAD_DWORD: return "S_BUFFER_LOAD_DWORD";
    case eOpcode::S_BUFFER_LOAD_DWORDX2: return "S_BUFFER_LOAD_DWORDX2";
    case eOpcode::S_BUFFER_LOAD_DWORDX4: return "S_BUFFER_LOAD_DWORDX4";
    case eOpcode::S_BUFFER_LOAD_DWORDX8: return "S_BUFFER_LOAD_DWORDX8";
    case eOpcode::S_BUFFER_LOAD_DWORDX16: return "S_BUFFER_LOAD_DWORDX16";
    case eOpcode::S_DCACHE_INV_VOL: return "S_DCACHE_INV_VOL";
    case eOpcode::S_MEMTIME: return "S_MEMTIME";
    case eOpcode::S_DCACHE_INV: return "S_DCACHE_INV";
    case eOpcode::S_DUMMY_SOP1: return "S_DUMMY_SOP1";
    case eOpcode::S_MOV_B32: return "S_MOV_B32";
    case eOpcode::S_MOV_B64: return "S_MOV_B64";
    case eOpcode::S_CMOV_B32: return "S_CMOV_B32";
    case eOpcode::S_CMOV_B64: return "S_CMOV_B64";
    case eOpcode::S_NOT_B32: return "S_NOT_B32";
    case eOpcode::S_NOT_B64: return "S_NOT_B64";
    case eOpcode::S_WQM_B32: return "S_WQM_B32";
    case eOpcode::S_WQM_B64: return "S_WQM_B64";
    case eOpcode::S_BREV_B32: return "S_BREV_B32";
    case eOpcode::S_BREV_B64: return "S_BREV_B64";
    case eOpcode::S_BCNT0_I32_B32: return "S_BCNT0_I32_B32";
    case eOpcode::S_BCNT0_I32_B64: return "S_BCNT0_I32_B64";
    case eOpcode::S_BCNT1_I32_B32: return "S_BCNT1_I32_B32";
    case eOpcode::S_BCNT1_I32_B64: return "S_BCNT1_I32_B64";
    case eOpcode::S_FF0_I32_B32: return "S_FF0_I32_B32";
    case eOpcode::S_FF0_I32_B64: return "S_FF0_I32_B64";
    case eOpcode::S_FF1_I32_B32: return "S_FF1_I32_B32";
    case eOpcode::S_FF1_I32_B64: return "S_FF1_I32_B64";
    case eOpcode::S_FLBIT_I32_B32: return "S_FLBIT_I32_B32";
    case eOpcode::S_FLBIT_I32_B64: return "S_FLBIT_I32_B64";
    case eOpcode::S_FLBIT_I32: return "S_FLBIT_I32";
    case eOpcode::S_FLBIT_I32_I64: return "S_FLBIT_I32_I64";
    case eOpcode::S_SEXT_I32_I8: return "S_SEXT_I32_I8";
    case eOpcode::S_SEXT_I32_I16: return "S_SEXT_I32_I16";
    case eOpcode::S_BITSET0_B32: return "S_BITSET0_B32";
    case eOpcode::S_BITSET0_B64: return "S_BITSET0_B64";
    case eOpcode::S_BITSET1_B32: return "S_BITSET1_B32";
    case eOpcode::S_BITSET1_B64: return "S_BITSET1_B64";
    case eOpcode::S_GETPC_B64: return "S_GETPC_B64";
    case eOpcode::S_SETPC_B64: return "S_SETPC_B64";
    case eOpcode::S_SWAPPC_B64: return "S_SWAPPC_B64";
    case eOpcode::S_RFE_B64: return "S_RFE_B64";
    case eOpcode::S_AND_SAVEEXEC_B64: return "S_AND_SAVEEXEC_B64";
    case eOpcode::S_OR_SAVEEXEC_B64: return "S_OR_SAVEEXEC_B64";
    case eOpcode::S_XOR_SAVEEXEC_B64: return "S_XOR_SAVEEXEC_B64";
    case eOpcode::S_ANDN2_SAVEEXEC_B64: return "S_ANDN2_SAVEEXEC_B64";
    case eOpcode::S_ORN2_SAVEEXEC_B64: return "S_ORN2_SAVEEXEC_B64";
    case eOpcode::S_NAND_SAVEEXEC_B64: return "S_NAND_SAVEEXEC_B64";
    case eOpcode::S_NOR_SAVEEXEC_B64: return "S_NOR_SAVEEXEC_B64";
    case eOpcode::S_XNOR_SAVEEXEC_B64: return "S_XNOR_SAVEEXEC_B64";
    case eOpcode::S_QUADMASK_B32: return "S_QUADMASK_B32";
    case eOpcode::S_QUADMASK_B64: return "S_QUADMASK_B64";
    case eOpcode::S_MOVRELS_B32: return "S_MOVRELS_B32";
    case eOpcode::S_MOVRELS_B64: return "S_MOVRELS_B64";
    case eOpcode::S_MOVRELD_B32: return "S_MOVRELD_B32";
    case eOpcode::S_MOVRELD_B64: return "S_MOVRELD_B64";
    case eOpcode::S_CBRANCH_JOIN: return "S_CBRANCH_JOIN";
    case eOpcode::S_MOV_REGRD_B32: return "S_MOV_REGRD_B32";
    case eOpcode::S_ABS_I32: return "S_ABS_I32";
    case eOpcode::S_MOV_FED_B32: return "S_MOV_FED_B32";
    case eOpcode::S_ADD_U32: return "S_ADD_U32";
    case eOpcode::S_SUB_U32: return "S_SUB_U32";
    case eOpcode::S_ADD_I32: return "S_ADD_I32";
    case eOpcode::S_SUB_I32: return "S_SUB_I32";
    case eOpcode::S_ADDC_U32: return "S_ADDC_U32";
    case eOpcode::S_SUBB_U32: return "S_SUBB_U32";
    case eOpcode::S_MIN_I32: return "S_MIN_I32";
    case eOpcode::S_MIN_U32: return "S_MIN_U32";
    case eOpcode::S_MAX_I32: return "S_MAX_I32";
    case eOpcode::S_MAX_U32: return "S_MAX_U32";
    case eOpcode::S_CSELECT_B32: return "S_CSELECT_B32";
    case eOpcode::S_CSELECT_B64: return "S_CSELECT_B64";
    case eOpcode::S_AND_B32: return "S_AND_B32";
    case eOpcode::S_AND_B64: return "S_AND_B64";
    case eOpcode::S_OR_B32: return "S_OR_B32";
    case eOpcode::S_OR_B64: return "S_OR_B64";
    case eOpcode::S_XOR_B32: return "S_XOR_B32";
    case eOpcode::S_XOR_B64: return "S_XOR_B64";
    case eOpcode::S_ANDN2_B32: return "S_ANDN2_B32";
    case eOpcode::S_ANDN2_B64: return "S_ANDN2_B64";
    case eOpcode::S_ORN2_B32: return "S_ORN2_B32";
    case eOpcode::S_ORN2_B64: return "S_ORN2_B64";
    case eOpcode::S_NAND_B32: return "S_NAND_B32";
    case eOpcode::S_NAND_B64: return "S_NAND_B64";
    case eOpcode::S_NOR_B32: return "S_NOR_B32";
    case eOpcode::S_NOR_B64: return "S_NOR_B64";
    case eOpcode::S_XNOR_B32: return "S_XNOR_B32";
    case eOpcode::S_XNOR_B64: return "S_XNOR_B64";
    case eOpcode::S_LSHL_B32: return "S_LSHL_B32";
    case eOpcode::S_LSHL_B64: return "S_LSHL_B64";
    case eOpcode::S_LSHR_B32: return "S_LSHR_B32";
    case eOpcode::S_LSHR_B64: return "S_LSHR_B64";
    case eOpcode::S_ASHR_I32: return "S_ASHR_I32";
    case eOpcode::S_ASHR_I64: return "S_ASHR_I64";
    case eOpcode::S_BFM_B32: return "S_BFM_B32";
    case eOpcode::S_BFM_B64: return "S_BFM_B64";
    case eOpcode::S_MUL_I32: return "S_MUL_I32";
    case eOpcode::S_BFE_U32: return "S_BFE_U32";
    case eOpcode::S_BFE_I32: return "S_BFE_I32";
    case eOpcode::S_BFE_U64: return "S_BFE_U64";
    case eOpcode::S_BFE_I64: return "S_BFE_I64";
    case eOpcode::S_CBRANCH_G_FORK: return "S_CBRANCH_G_FORK";
    case eOpcode::S_ABSDIFF_I32: return "S_ABSDIFF_I32";
    case eOpcode::S_CMP_EQ_I32: return "S_CMP_EQ_I32";
    case eOpcode::S_CMP_LG_I32: return "S_CMP_LG_I32";
    case eOpcode::S_CMP_GT_I32: return "S_CMP_GT_I32";
    case eOpcode::S_CMP_GE_I32: return "S_CMP_GE_I32";
    case eOpcode::S_CMP_LT_I32: return "S_CMP_LT_I32";
    case eOpcode::S_CMP_LE_I32: return "S_CMP_LE_I32";
    case eOpcode::S_CMP_EQ_U32: return "S_CMP_EQ_U32";
    case eOpcode::S_CMP_LG_U32: return "S_CMP_LG_U32";
    case eOpcode::S_CMP_GT_U32: return "S_CMP_GT_U32";
    case eOpcode::S_CMP_GE_U32: return "S_CMP_GE_U32";
    case eOpcode::S_CMP_LT_U32: return "S_CMP_LT_U32";
    case eOpcode::S_CMP_LE_U32: return "S_CMP_LE_U32";
    case eOpcode::S_BITCMP0_B32: return "S_BITCMP0_B32";
    case eOpcode::S_BITCMP1_B32: return "S_BITCMP1_B32";
    case eOpcode::S_BITCMP0_B64: return "S_BITCMP0_B64";
    case eOpcode::S_BITCMP1_B64: return "S_BITCMP1_B64";
    case eOpcode::S_SETVSKIP: return "S_SETVSKIP";
    case eOpcode::S_MOVK_I32: return "S_MOVK_I32";
    case eOpcode::S_CMOVK_I32: return "S_CMOVK_I32";
    case eOpcode::S_CMPK_EQ_I32: return "S_CMPK_EQ_I32";
    case eOpcode::S_CMPK_LG_I32: return "S_CMPK_LG_I32";
    case eOpcode::S_CMPK_GT_I32: return "S_CMPK_GT_I32";
    case eOpcode::S_CMPK_GE_I32: return "S_CMPK_GE_I32";
    case eOpcode::S_CMPK_LT_I32: return "S_CMPK_LT_I32";
    case eOpcode::S_CMPK_LE_I32: return "S_CMPK_LE_I32";
    case eOpcode::S_CMPK_EQ_U32: return "S_CMPK_EQ_U32";
    case eOpcode::S_CMPK_LG_U32: return "S_CMPK_LG_U32";
    case eOpcode::S_CMPK_GT_U32: return "S_CMPK_GT_U32";
    case eOpcode::S_CMPK_GE_U32: return "S_CMPK_GE_U32";
    case eOpcode::S_CMPK_LT_U32: return "S_CMPK_LT_U32";
    case eOpcode::S_CMPK_LE_U32: return "S_CMPK_LE_U32";
    case eOpcode::S_ADDK_I32: return "S_ADDK_I32";
    case eOpcode::S_MULK_I32: return "S_MULK_I32";
    case eOpcode::S_CBRANCH_I_FORK: return "S_CBRANCH_I_FORK";
    case eOpcode::S_GETREG_B32: return "S_GETREG_B32";
    case eOpcode::S_SETREG_B32: return "S_SETREG_B32";
    case eOpcode::S_GETREG_REGRD_B32: return "S_GETREG_REGRD_B32";
    case eOpcode::S_SETREG_IMM32_B32: return "S_SETREG_IMM32_B32";
    case eOpcode::S_NOP: return "S_NOP";
    case eOpcode::S_ENDPGM: return "S_ENDPGM";
    case eOpcode::S_BRANCH: return "S_BRANCH";
    case eOpcode::S_CBRANCH_SCC0: return "S_CBRANCH_SCC0";
    case eOpcode::S_CBRANCH_SCC1: return "S_CBRANCH_SCC1";
    case eOpcode::S_CBRANCH_VCCZ: return "S_CBRANCH_VCCZ";
    case eOpcode::S_CBRANCH_VCCNZ: return "S_CBRANCH_VCCNZ";
    case eOpcode::S_CBRANCH_EXECZ: return "S_CBRANCH_EXECZ";
    case eOpcode::S_CBRANCH_EXECNZ: return "S_CBRANCH_EXECNZ";
    case eOpcode::S_BARRIER: return "S_BARRIER";
    case eOpcode::S_SETKILL: return "S_SETKILL";
    case eOpcode::S_WAITCNT: return "S_WAITCNT";
    case eOpcode::S_SETHALT: return "S_SETHALT";
    case eOpcode::S_SLEEP: return "S_SLEEP";
    case eOpcode::S_SETPRIO: return "S_SETPRIO";
    case eOpcode::S_SENDMSG: return "S_SENDMSG";
    case eOpcode::S_SENDMSGHALT: return "S_SENDMSGHALT";
    case eOpcode::S_TRAP: return "S_TRAP";
    case eOpcode::S_ICACHE_INV: return "S_ICACHE_INV";
    case eOpcode::S_INCPERFLEVEL: return "S_INCPERFLEVEL";
    case eOpcode::S_DECPERFLEVEL: return "S_DECPERFLEVEL";
    case eOpcode::S_TTRACEDATA: return "S_TTRACEDATA";
    case eOpcode::S_CBRANCH_CDBGSYS: return "S_CBRANCH_CDBGSYS";
    case eOpcode::S_CBRANCH_CDBGUSER: return "S_CBRANCH_CDBGUSER";
    case eOpcode::S_CBRANCH_CDBGSYS_OR_USER: return "S_CBRANCH_CDBGSYS_OR_USER";
    case eOpcode::S_CBRANCH_CDBGSYS_AND_USER: return "S_CBRANCH_CDBGSYS_AND_USER";
    case eOpcode::V_INTERP_P1_F32: return "V_INTERP_P1_F32";
    case eOpcode::V_INTERP_P2_F32: return "V_INTERP_P2_F32";
    case eOpcode::V_INTERP_MOV_F32: return "V_INTERP_MOV_F32";
    case eOpcode::V_NOP: return "V_NOP";
    case eOpcode::V_MOV_B32: return "V_MOV_B32";
    case eOpcode::V_READFIRSTLANE_B32: return "V_READFIRSTLANE_B32";
    case eOpcode::V_CVT_I32_F64: return "V_CVT_I32_F64";
    case eOpcode::V_CVT_F64_I32: return "V_CVT_F64_I32";
    case eOpcode::V_CVT_F32_I32: return "V_CVT_F32_I32";
    case eOpcode::V_CVT_F32_U32: return "V_CVT_F32_U32";
    case eOpcode::V_CVT_U32_F32: return "V_CVT_U32_F32";
    case eOpcode::V_CVT_I32_F32: return "V_CVT_I32_F32";
    case eOpcode::V_MOV_FED_B32: return "V_MOV_FED_B32";
    case eOpcode::V_CVT_F16_F32: return "V_CVT_F16_F32";
    case eOpcode::V_CVT_F32_F16: return "V_CVT_F32_F16";
    case eOpcode::V_CVT_RPI_I32_F32: return "V_CVT_RPI_I32_F32";
    case eOpcode::V_CVT_FLR_I32_F32: return "V_CVT_FLR_I32_F32";
    case eOpcode::V_CVT_OFF_F32_I4: return "V_CVT_OFF_F32_I4";
    case eOpcode::V_CVT_F32_F64: return "V_CVT_F32_F64";
    case eOpcode::V_CVT_F64_F32: return "V_CVT_F64_F32";
    case eOpcode::V_CVT_F32_UBYTE0: return "V_CVT_F32_UBYTE0";
    case eOpcode::V_CVT_F32_UBYTE1: return "V_CVT_F32_UBYTE1";
    case eOpcode::V_CVT_F32_UBYTE2: return "V_CVT_F32_UBYTE2";
    case eOpcode::V_CVT_F32_UBYTE3: return "V_CVT_F32_UBYTE3";
    case eOpcode::V_CVT_U32_F64: return "V_CVT_U32_F64";
    case eOpcode::V_CVT_F64_U32: return "V_CVT_F64_U32";
    case eOpcode::V_TRUNC_F64: return "V_TRUNC_F64";
    case eOpcode::V_CEIL_F64: return "V_CEIL_F64";
    case eOpcode::V_RNDNE_F64: return "V_RNDNE_F64";
    case eOpcode::V_FLOOR_F64: return "V_FLOOR_F64";
    case eOpcode::V_FRACT_F32: return "V_FRACT_F32";
    case eOpcode::V_TRUNC_F32: return "V_TRUNC_F32";
    case eOpcode::V_CEIL_F32: return "V_CEIL_F32";
    case eOpcode::V_RNDNE_F32: return "V_RNDNE_F32";
    case eOpcode::V_FLOOR_F32: return "V_FLOOR_F32";
    case eOpcode::V_EXP_F32: return "V_EXP_F32";
    case eOpcode::V_LOG_CLAMP_F32: return "V_LOG_CLAMP_F32";
    case eOpcode::V_LOG_F32: return "V_LOG_F32";
    case eOpcode::V_RCP_CLAMP_F32: return "V_RCP_CLAMP_F32";
    case eOpcode::V_RCP_LEGACY_F32: return "V_RCP_LEGACY_F32";
    case eOpcode::V_RCP_F32: return "V_RCP_F32";
    case eOpcode::V_RCP_IFLAG_F32: return "V_RCP_IFLAG_F32";
    case eOpcode::V_RSQ_CLAMP_F32: return "V_RSQ_CLAMP_F32";
    case eOpcode::V_RSQ_LEGACY_F32: return "V_RSQ_LEGACY_F32";
    case eOpcode::V_RSQ_F32: return "V_RSQ_F32";
    case eOpcode::V_RCP_F64: return "V_RCP_F64";
    case eOpcode::V_RCP_CLAMP_F64: return "V_RCP_CLAMP_F64";
    case eOpcode::V_RSQ_F64: return "V_RSQ_F64";
    case eOpcode::V_RSQ_CLAMP_F64: return "V_RSQ_CLAMP_F64";
    case eOpcode::V_SQRT_F32: return "V_SQRT_F32";
    case eOpcode::V_SQRT_F64: return "V_SQRT_F64";
    case eOpcode::V_SIN_F32: return "V_SIN_F32";
    case eOpcode::V_COS_F32: return "V_COS_F32";
    case eOpcode::V_NOT_B32: return "V_NOT_B32";
    case eOpcode::V_BFREV_B32: return "V_BFREV_B32";
    case eOpcode::V_FFBH_U32: return "V_FFBH_U32";
    case eOpcode::V_FFBL_B32: return "V_FFBL_B32";
    case eOpcode::V_FFBH_I32: return "V_FFBH_I32";
    case eOpcode::V_FREXP_EXP_I32_F64: return "V_FREXP_EXP_I32_F64";
    case eOpcode::V_FREXP_MANT_F64: return "V_FREXP_MANT_F64";
    case eOpcode::V_FRACT_F64: return "V_FRACT_F64";
    case eOpcode::V_FREXP_EXP_I32_F32: return "V_FREXP_EXP_I32_F32";
    case eOpcode::V_FREXP_MANT_F32: return "V_FREXP_MANT_F32";
    case eOpcode::V_CLREXCP: return "V_CLREXCP";
    case eOpcode::V_MOVRELD_B32: return "V_MOVRELD_B32";
    case eOpcode::V_MOVRELS_B32: return "V_MOVRELS_B32";
    case eOpcode::V_MOVRELSD_B32: return "V_MOVRELSD_B32";
    case eOpcode::V_LOG_LEGACY_F32: return "V_LOG_LEGACY_F32";
    case eOpcode::V_EXP_LEGACY_F32: return "V_EXP_LEGACY_F32";
    case eOpcode::V_CNDMASK_B32: return "V_CNDMASK_B32";
    case eOpcode::V_READLANE_B32: return "V_READLANE_B32";
    case eOpcode::V_WRITELANE_B32: return "V_WRITELANE_B32";
    case eOpcode::V_ADD_F32: return "V_ADD_F32";
    case eOpcode::V_SUB_F32: return "V_SUB_F32";
    case eOpcode::V_SUBREV_F32: return "V_SUBREV_F32";
    case eOpcode::V_MAC_LEGACY_F32: return "V_MAC_LEGACY_F32";
    case eOpcode::V_MUL_LEGACY_F32: return "V_MUL_LEGACY_F32";
    case eOpcode::V_MUL_F32: return "V_MUL_F32";
    case eOpcode::V_MUL_I32_I24: return "V_MUL_I32_I24";
    case eOpcode::V_MUL_HI_I32_I24: return "V_MUL_HI_I32_I24";
    case eOpcode::V_MUL_U32_U24: return "V_MUL_U32_U24";
    case eOpcode::V_MUL_HI_U32_U24: return "V_MUL_HI_U32_U24";
    case eOpcode::V_MIN_LEGACY_F32: return "V_MIN_LEGACY_F32";
    case eOpcode::V_MAX_LEGACY_F32: return "V_MAX_LEGACY_F32";
    case eOpcode::V_MIN_F32: return "V_MIN_F32";
    case eOpcode::V_MAX_F32: return "V_MAX_F32";
    case eOpcode::V_MIN_I32: return "V_MIN_I32";
    case eOpcode::V_MAX_I32: return "V_MAX_I32";
    case eOpcode::V_MIN_U32: return "V_MIN_U32";
    case eOpcode::V_MAX_U32: return "V_MAX_U32";
    case eOpcode::V_LSHR_B32: return "V_LSHR_B32";
    case eOpcode::V_LSHRREV_B32: return "V_LSHRREV_B32";
    case eOpcode::V_ASHR_I32: return "V_ASHR_I32";
    case eOpcode::V_ASHRREV_I32: return "V_ASHRREV_I32";
    case eOpcode::V_LSHL_B32: return "V_LSHL_B32";
    case eOpcode::V_LSHLREV_B32: return "V_LSHLREV_B32";
    case eOpcode::V_AND_B32: return "V_AND_B32";
    case eOpcode::V_OR_B32: return "V_OR_B32";
    case eOpcode::V_XOR_B32: return "V_XOR_B32";
    case eOpcode::V_BFM_B32: return "V_BFM_B32";
    case eOpcode::V_MAC_F32: return "V_MAC_F32";
    case eOpcode::V_MADMK_F32: return "V_MADMK_F32";
    case eOpcode::V_MADAK_F32: return "V_MADAK_F32";
    case eOpcode::V_BCNT_U32_B32: return "V_BCNT_U32_B32";
    case eOpcode::V_MBCNT_LO_U32_B32: return "V_MBCNT_LO_U32_B32";
    case eOpcode::V_MBCNT_HI_U32_B32: return "V_MBCNT_HI_U32_B32";
    case eOpcode::V_ADD_I32: return "V_ADD_I32";
    case eOpcode::V_SUB_I32: return "V_SUB_I32";
    case eOpcode::V_SUBREV_I32: return "V_SUBREV_I32";
    case eOpcode::V_ADDC_U32: return "V_ADDC_U32";
    case eOpcode::V_SUBB_U32: return "V_SUBB_U32";
    case eOpcode::V_SUBBREV_U32: return "V_SUBBREV_U32";
    case eOpcode::V_LDEXP_F32: return "V_LDEXP_F32";
    case eOpcode::V_CVT_PKACCUM_U8_F32: return "V_CVT_PKACCUM_U8_F32";
    case eOpcode::V_CVT_PKNORM_I16_F32: return "V_CVT_PKNORM_I16_F32";
    case eOpcode::V_CVT_PKNORM_U16_F32: return "V_CVT_PKNORM_U16_F32";
    case eOpcode::V_CVT_PKRTZ_F16_F32: return "V_CVT_PKRTZ_F16_F32";
    case eOpcode::V_CVT_PK_U16_U32: return "V_CVT_PK_U16_U32";
    case eOpcode::V_CVT_PK_I16_I32: return "V_CVT_PK_I16_I32";
    case eOpcode::V_DUMMY_VOP3: return "V_DUMMY_VOP3";
    case eOpcode::V_MAD_LEGACY_F32: return "V_MAD_LEGACY_F32";
    case eOpcode::V_MAD_F32: return "V_MAD_F32";
    case eOpcode::V_MAD_I32_I24: return "V_MAD_I32_I24";
    case eOpcode::V_MAD_U32_U24: return "V_MAD_U32_U24";
    case eOpcode::V_CUBEID_F32: return "V_CUBEID_F32";
    case eOpcode::V_CUBESC_F32: return "V_CUBESC_F32";
    case eOpcode::V_CUBETC_F32: return "V_CUBETC_F32";
    case eOpcode::V_CUBEMA_F32: return "V_CUBEMA_F32";
    case eOpcode::V_BFE_U32: return "V_BFE_U32";
    case eOpcode::V_BFE_I32: return "V_BFE_I32";
    case eOpcode::V_BFI_B32: return "V_BFI_B32";
    case eOpcode::V_FMA_F32: return "V_FMA_F32";
    case eOpcode::V_FMA_F64: return "V_FMA_F64";
    case eOpcode::V_LERP_U8: return "V_LERP_U8";
    case eOpcode::V_ALIGNBIT_B32: return "V_ALIGNBIT_B32";
    case eOpcode::V_ALIGNBYTE_B32: return "V_ALIGNBYTE_B32";
    case eOpcode::V_MULLIT_F32: return "V_MULLIT_F32";
    case eOpcode::V_MIN3_F32: return "V_MIN3_F32";
    case eOpcode::V_MIN3_I32: return "V_MIN3_I32";
    case eOpcode::V_MIN3_U32: return "V_MIN3_U32";
    case eOpcode::V_MAX3_F32: return "V_MAX3_F32";
    case eOpcode::V_MAX3_I32: return "V_MAX3_I32";
    case eOpcode::V_MAX3_U32: return "V_MAX3_U32";
    case eOpcode::V_MED3_F32: return "V_MED3_F32";
    case eOpcode::V_MED3_I32: return "V_MED3_I32";
    case eOpcode::V_MED3_U32: return "V_MED3_U32";
    case eOpcode::V_SAD_U8: return "V_SAD_U8";
    case eOpcode::V_SAD_HI_U8: return "V_SAD_HI_U8";
    case eOpcode::V_SAD_U16: return "V_SAD_U16";
    case eOpcode::V_SAD_U32: return "V_SAD_U32";
    case eOpcode::V_CVT_PK_U8_F32: return "V_CVT_PK_U8_F32";
    case eOpcode::V_DIV_FIXUP_F32: return "V_DIV_FIXUP_F32";
    case eOpcode::V_DIV_FIXUP_F64: return "V_DIV_FIXUP_F64";
    case eOpcode::V_LSHL_B64: return "V_LSHL_B64";
    case eOpcode::V_LSHR_B64: return "V_LSHR_B64";
    case eOpcode::V_ASHR_I64: return "V_ASHR_I64";
    case eOpcode::V_ADD_F64: return "V_ADD_F64";
    case eOpcode::V_MUL_F64: return "V_MUL_F64";
    case eOpcode::V_MIN_F64: return "V_MIN_F64";
    case eOpcode::V_MAX_F64: return "V_MAX_F64";
    case eOpcode::V_LDEXP_F64: return "V_LDEXP_F64";
    case eOpcode::V_MUL_LO_U32: return "V_MUL_LO_U32";
    case eOpcode::V_MUL_HI_U32: return "V_MUL_HI_U32";
    case eOpcode::V_MUL_LO_I32: return "V_MUL_LO_I32";
    case eOpcode::V_MUL_HI_I32: return "V_MUL_HI_I32";
    case eOpcode::V_DIV_SCALE_F32: return "V_DIV_SCALE_F32";
    case eOpcode::V_DIV_SCALE_F64: return "V_DIV_SCALE_F64";
    case eOpcode::V_DIV_FMAS_F32: return "V_DIV_FMAS_F32";
    case eOpcode::V_DIV_FMAS_F64: return "V_DIV_FMAS_F64";
    case eOpcode::V_MSAD_U8: return "V_MSAD_U8";
    case eOpcode::V_QSAD_U8: return "V_QSAD_U8";
    case eOpcode::V_MQSAD_U8: return "V_MQSAD_U8";
    case eOpcode::V_TRIG_PREOP_F64: return "V_TRIG_PREOP_F64";
    case eOpcode::V_MQSAD_U32_U8: return "V_MQSAD_U32_U8";
    case eOpcode::V_MAD_U64_U32: return "V_MAD_U64_U32";
    case eOpcode::V_MAD_I64_I32: return "V_MAD_I64_I32";
    case eOpcode::V_CMP_F_F32: return "V_CMP_F_F32";
    case eOpcode::V_CMP_LT_F32: return "V_CMP_LT_F32";
    case eOpcode::V_CMP_EQ_F32: return "V_CMP_EQ_F32";
    case eOpcode::V_CMP_LE_F32: return "V_CMP_LE_F32";
    case eOpcode::V_CMP_GT_F32: return "V_CMP_GT_F32";
    case eOpcode::V_CMP_LG_F32: return "V_CMP_LG_F32";
    case eOpcode::V_CMP_GE_F32: return "V_CMP_GE_F32";
    case eOpcode::V_CMP_O_F32: return "V_CMP_O_F32";
    case eOpcode::V_CMP_U_F32: return "V_CMP_U_F32";
    case eOpcode::V_CMP_NGE_F32: return "V_CMP_NGE_F32";
    case eOpcode::V_CMP_NLG_F32: return "V_CMP_NLG_F32";
    case eOpcode::V_CMP_NGT_F32: return "V_CMP_NGT_F32";
    case eOpcode::V_CMP_NLE_F32: return "V_CMP_NLE_F32";
    case eOpcode::V_CMP_NEQ_F32: return "V_CMP_NEQ_F32";
    case eOpcode::V_CMP_NLT_F32: return "V_CMP_NLT_F32";
    case eOpcode::V_CMP_T_F32: return "V_CMP_T_F32";
    case eOpcode::V_CMPX_F_F32: return "V_CMPX_F_F32";
    case eOpcode::V_CMPX_LT_F32: return "V_CMPX_LT_F32";
    case eOpcode::V_CMPX_EQ_F32: return "V_CMPX_EQ_F32";
    case eOpcode::V_CMPX_LE_F32: return "V_CMPX_LE_F32";
    case eOpcode::V_CMPX_GT_F32: return "V_CMPX_GT_F32";
    case eOpcode::V_CMPX_LG_F32: return "V_CMPX_LG_F32";
    case eOpcode::V_CMPX_GE_F32: return "V_CMPX_GE_F32";
    case eOpcode::V_CMPX_O_F32: return "V_CMPX_O_F32";
    case eOpcode::V_CMPX_U_F32: return "V_CMPX_U_F32";
    case eOpcode::V_CMPX_NGE_F32: return "V_CMPX_NGE_F32";
    case eOpcode::V_CMPX_NLG_F32: return "V_CMPX_NLG_F32";
    case eOpcode::V_CMPX_NGT_F32: return "V_CMPX_NGT_F32";
    case eOpcode::V_CMPX_NLE_F32: return "V_CMPX_NLE_F32";
    case eOpcode::V_CMPX_NEQ_F32: return "V_CMPX_NEQ_F32";
    case eOpcode::V_CMPX_NLT_F32: return "V_CMPX_NLT_F32";
    case eOpcode::V_CMPX_T_F32: return "V_CMPX_T_F32";
    case eOpcode::V_CMP_F_F64: return "V_CMP_F_F64";
    case eOpcode::V_CMP_LT_F64: return "V_CMP_LT_F64";
    case eOpcode::V_CMP_EQ_F64: return "V_CMP_EQ_F64";
    case eOpcode::V_CMP_LE_F64: return "V_CMP_LE_F64";
    case eOpcode::V_CMP_GT_F64: return "V_CMP_GT_F64";
    case eOpcode::V_CMP_LG_F64: return "V_CMP_LG_F64";
    case eOpcode::V_CMP_GE_F64: return "V_CMP_GE_F64";
    case eOpcode::V_CMP_O_F64: return "V_CMP_O_F64";
    case eOpcode::V_CMP_U_F64: return "V_CMP_U_F64";
    case eOpcode::V_CMP_NGE_F64: return "V_CMP_NGE_F64";
    case eOpcode::V_CMP_NLG_F64: return "V_CMP_NLG_F64";
    case eOpcode::V_CMP_NGT_F64: return "V_CMP_NGT_F64";
    case eOpcode::V_CMP_NLE_F64: return "V_CMP_NLE_F64";
    case eOpcode::V_CMP_NEQ_F64: return "V_CMP_NEQ_F64";
    case eOpcode::V_CMP_NLT_F64: return "V_CMP_NLT_F64";
    case eOpcode::V_CMP_T_F64: return "V_CMP_T_F64";
    case eOpcode::V_CMPX_F_F64: return "V_CMPX_F_F64";
    case eOpcode::V_CMPX_LT_F64: return "V_CMPX_LT_F64";
    case eOpcode::V_CMPX_EQ_F64: return "V_CMPX_EQ_F64";
    case eOpcode::V_CMPX_LE_F64: return "V_CMPX_LE_F64";
    case eOpcode::V_CMPX_GT_F64: return "V_CMPX_GT_F64";
    case eOpcode::V_CMPX_LG_F64: return "V_CMPX_LG_F64";
    case eOpcode::V_CMPX_GE_F64: return "V_CMPX_GE_F64";
    case eOpcode::V_CMPX_O_F64: return "V_CMPX_O_F64";
    case eOpcode::V_CMPX_U_F64: return "V_CMPX_U_F64";
    case eOpcode::V_CMPX_NGE_F64: return "V_CMPX_NGE_F64";
    case eOpcode::V_CMPX_NLG_F64: return "V_CMPX_NLG_F64";
    case eOpcode::V_CMPX_NGT_F64: return "V_CMPX_NGT_F64";
    case eOpcode::V_CMPX_NLE_F64: return "V_CMPX_NLE_F64";
    case eOpcode::V_CMPX_NEQ_F64: return "V_CMPX_NEQ_F64";
    case eOpcode::V_CMPX_NLT_F64: return "V_CMPX_NLT_F64";
    case eOpcode::V_CMPX_T_F64: return "V_CMPX_T_F64";
    case eOpcode::V_CMPS_F_F32: return "V_CMPS_F_F32";
    case eOpcode::V_CMPS_LT_F32: return "V_CMPS_LT_F32";
    case eOpcode::V_CMPS_EQ_F32: return "V_CMPS_EQ_F32";
    case eOpcode::V_CMPS_LE_F32: return "V_CMPS_LE_F32";
    case eOpcode::V_CMPS_GT_F32: return "V_CMPS_GT_F32";
    case eOpcode::V_CMPS_LG_F32: return "V_CMPS_LG_F32";
    case eOpcode::V_CMPS_GE_F32: return "V_CMPS_GE_F32";
    case eOpcode::V_CMPS_O_F32: return "V_CMPS_O_F32";
    case eOpcode::V_CMPS_U_F32: return "V_CMPS_U_F32";
    case eOpcode::V_CMPS_NGE_F32: return "V_CMPS_NGE_F32";
    case eOpcode::V_CMPS_NLG_F32: return "V_CMPS_NLG_F32";
    case eOpcode::V_CMPS_NGT_F32: return "V_CMPS_NGT_F32";
    case eOpcode::V_CMPS_NLE_F32: return "V_CMPS_NLE_F32";
    case eOpcode::V_CMPS_NEQ_F32: return "V_CMPS_NEQ_F32";
    case eOpcode::V_CMPS_NLT_F32: return "V_CMPS_NLT_F32";
    case eOpcode::V_CMPS_T_F32: return "V_CMPS_T_F32";
    case eOpcode::V_CMPSX_F_F32: return "V_CMPSX_F_F32";
    case eOpcode::V_CMPSX_LT_F32: return "V_CMPSX_LT_F32";
    case eOpcode::V_CMPSX_EQ_F32: return "V_CMPSX_EQ_F32";
    case eOpcode::V_CMPSX_LE_F32: return "V_CMPSX_LE_F32";
    case eOpcode::V_CMPSX_GT_F32: return "V_CMPSX_GT_F32";
    case eOpcode::V_CMPSX_LG_F32: return "V_CMPSX_LG_F32";
    case eOpcode::V_CMPSX_GE_F32: return "V_CMPSX_GE_F32";
    case eOpcode::V_CMPSX_O_F32: return "V_CMPSX_O_F32";
    case eOpcode::V_CMPSX_U_F32: return "V_CMPSX_U_F32";
    case eOpcode::V_CMPSX_NGE_F32: return "V_CMPSX_NGE_F32";
    case eOpcode::V_CMPSX_NLG_F32: return "V_CMPSX_NLG_F32";
    case eOpcode::V_CMPSX_NGT_F32: return "V_CMPSX_NGT_F32";
    case eOpcode::V_CMPSX_NLE_F32: return "V_CMPSX_NLE_F32";
    case eOpcode::V_CMPSX_NEQ_F32: return "V_CMPSX_NEQ_F32";
    case eOpcode::V_CMPSX_NLT_F32: return "V_CMPSX_NLT_F32";
    case eOpcode::V_CMPSX_T_F32: return "V_CMPSX_T_F32";
    case eOpcode::V_CMPS_F_F64: return "V_CMPS_F_F64";
    case eOpcode::V_CMPS_LT_F64: return "V_CMPS_LT_F64";
    case eOpcode::V_CMPS_EQ_F64: return "V_CMPS_EQ_F64";
    case eOpcode::V_CMPS_LE_F64: return "V_CMPS_LE_F64";
    case eOpcode::V_CMPS_GT_F64: return "V_CMPS_GT_F64";
    case eOpcode::V_CMPS_LG_F64: return "V_CMPS_LG_F64";
    case eOpcode::V_CMPS_GE_F64: return "V_CMPS_GE_F64";
    case eOpcode::V_CMPS_O_F64: return "V_CMPS_O_F64";
    case eOpcode::V_CMPS_U_F64: return "V_CMPS_U_F64";
    case eOpcode::V_CMPS_NGE_F64: return "V_CMPS_NGE_F64";
    case eOpcode::V_CMPS_NLG_F64: return "V_CMPS_NLG_F64";
    case eOpcode::V_CMPS_NGT_F64: return "V_CMPS_NGT_F64";
    case eOpcode::V_CMPS_NLE_F64: return "V_CMPS_NLE_F64";
    case eOpcode::V_CMPS_NEQ_F64: return "V_CMPS_NEQ_F64";
    case eOpcode::V_CMPS_NLT_F64: return "V_CMPS_NLT_F64";
    case eOpcode::V_CMPS_T_F64: return "V_CMPS_T_F64";
    case eOpcode::V_CMPSX_F_F64: return "V_CMPSX_F_F64";
    case eOpcode::V_CMPSX_LT_F64: return "V_CMPSX_LT_F64";
    case eOpcode::V_CMPSX_EQ_F64: return "V_CMPSX_EQ_F64";
    case eOpcode::V_CMPSX_LE_F64: return "V_CMPSX_LE_F64";
    case eOpcode::V_CMPSX_GT_F64: return "V_CMPSX_GT_F64";
    case eOpcode::V_CMPSX_LG_F64: return "V_CMPSX_LG_F64";
    case eOpcode::V_CMPSX_GE_F64: return "V_CMPSX_GE_F64";
    case eOpcode::V_CMPSX_O_F64: return "V_CMPSX_O_F64";
    case eOpcode::V_CMPSX_U_F64: return "V_CMPSX_U_F64";
    case eOpcode::V_CMPSX_NGE_F64: return "V_CMPSX_NGE_F64";
    case eOpcode::V_CMPSX_NLG_F64: return "V_CMPSX_NLG_F64";
    case eOpcode::V_CMPSX_NGT_F64: return "V_CMPSX_NGT_F64";
    case eOpcode::V_CMPSX_NLE_F64: return "V_CMPSX_NLE_F64";
    case eOpcode::V_CMPSX_NEQ_F64: return "V_CMPSX_NEQ_F64";
    case eOpcode::V_CMPSX_NLT_F64: return "V_CMPSX_NLT_F64";
    case eOpcode::V_CMPSX_T_F64: return "V_CMPSX_T_F64";
    case eOpcode::V_CMP_F_I32: return "V_CMP_F_I32";
    case eOpcode::V_CMP_LT_I32: return "V_CMP_LT_I32";
    case eOpcode::V_CMP_EQ_I32: return "V_CMP_EQ_I32";
    case eOpcode::V_CMP_LE_I32: return "V_CMP_LE_I32";
    case eOpcode::V_CMP_GT_I32: return "V_CMP_GT_I32";
    case eOpcode::V_CMP_NE_I32: return "V_CMP_NE_I32";
    case eOpcode::V_CMP_GE_I32: return "V_CMP_GE_I32";
    case eOpcode::V_CMP_T_I32: return "V_CMP_T_I32";
    case eOpcode::V_CMP_CLASS_F32: return "V_CMP_CLASS_F32";
    case eOpcode::V_CMPX_F_I32: return "V_CMPX_F_I32";
    case eOpcode::V_CMPX_LT_I32: return "V_CMPX_LT_I32";
    case eOpcode::V_CMPX_EQ_I32: return "V_CMPX_EQ_I32";
    case eOpcode::V_CMPX_LE_I32: return "V_CMPX_LE_I32";
    case eOpcode::V_CMPX_GT_I32: return "V_CMPX_GT_I32";
    case eOpcode::V_CMPX_NE_I32: return "V_CMPX_NE_I32";
    case eOpcode::V_CMPX_GE_I32: return "V_CMPX_GE_I32";
    case eOpcode::V_CMPX_T_I32: return "V_CMPX_T_I32";
    case eOpcode::V_CMPX_CLASS_F32: return "V_CMPX_CLASS_F32";
    case eOpcode::V_CMP_F_I64: return "V_CMP_F_I64";
    case eOpcode::V_CMP_LT_I64: return "V_CMP_LT_I64";
    case eOpcode::V_CMP_EQ_I64: return "V_CMP_EQ_I64";
    case eOpcode::V_CMP_LE_I64: return "V_CMP_LE_I64";
    case eOpcode::V_CMP_GT_I64: return "V_CMP_GT_I64";
    case eOpcode::V_CMP_NE_I64: return "V_CMP_NE_I64";
    case eOpcode::V_CMP_GE_I64: return "V_CMP_GE_I64";
    case eOpcode::V_CMP_T_I64: return "V_CMP_T_I64";
    case eOpcode::V_CMP_CLASS_F64: return "V_CMP_CLASS_F64";
    case eOpcode::V_CMPX_F_I64: return "V_CMPX_F_I64";
    case eOpcode::V_CMPX_LT_I64: return "V_CMPX_LT_I64";
    case eOpcode::V_CMPX_EQ_I64: return "V_CMPX_EQ_I64";
    case eOpcode::V_CMPX_LE_I64: return "V_CMPX_LE_I64";
    case eOpcode::V_CMPX_GT_I64: return "V_CMPX_GT_I64";
    case eOpcode::V_CMPX_NE_I64: return "V_CMPX_NE_I64";
    case eOpcode::V_CMPX_GE_I64: return "V_CMPX_GE_I64";
    case eOpcode::V_CMPX_T_I64: return "V_CMPX_T_I64";
    case eOpcode::V_CMPX_CLASS_F64: return "V_CMPX_CLASS_F64";
    case eOpcode::V_CMP_F_U32: return "V_CMP_F_U32";
    case eOpcode::V_CMP_LT_U32: return "V_CMP_LT_U32";
    case eOpcode::V_CMP_EQ_U32: return "V_CMP_EQ_U32";
    case eOpcode::V_CMP_LE_U32: return "V_CMP_LE_U32";
    case eOpcode::V_CMP_GT_U32: return "V_CMP_GT_U32";
    case eOpcode::V_CMP_NE_U32: return "V_CMP_NE_U32";
    case eOpcode::V_CMP_GE_U32: return "V_CMP_GE_U32";
    case eOpcode::V_CMP_T_U32: return "V_CMP_T_U32";
    case eOpcode::V_CMPX_F_U32: return "V_CMPX_F_U32";
    case eOpcode::V_CMPX_LT_U32: return "V_CMPX_LT_U32";
    case eOpcode::V_CMPX_EQ_U32: return "V_CMPX_EQ_U32";
    case eOpcode::V_CMPX_LE_U32: return "V_CMPX_LE_U32";
    case eOpcode::V_CMPX_GT_U32: return "V_CMPX_GT_U32";
    case eOpcode::V_CMPX_NE_U32: return "V_CMPX_NE_U32";
    case eOpcode::V_CMPX_GE_U32: return "V_CMPX_GE_U32";
    case eOpcode::V_CMPX_T_U32: return "V_CMPX_T_U32";
    case eOpcode::V_CMP_F_U64: return "V_CMP_F_U64";
    case eOpcode::V_CMP_LT_U64: return "V_CMP_LT_U64";
    case eOpcode::V_CMP_EQ_U64: return "V_CMP_EQ_U64";
    case eOpcode::V_CMP_LE_U64: return "V_CMP_LE_U64";
    case eOpcode::V_CMP_GT_U64: return "V_CMP_GT_U64";
    case eOpcode::V_CMP_NE_U64: return "V_CMP_NE_U64";
    case eOpcode::V_CMP_GE_U64: return "V_CMP_GE_U64";
    case eOpcode::V_CMP_T_U64: return "V_CMP_T_U64";
    case eOpcode::V_CMPX_F_U64: return "V_CMPX_F_U64";
    case eOpcode::V_CMPX_LT_U64: return "V_CMPX_LT_U64";
    case eOpcode::V_CMPX_EQ_U64: return "V_CMPX_EQ_U64";
    case eOpcode::V_CMPX_LE_U64: return "V_CMPX_LE_U64";
    case eOpcode::V_CMPX_GT_U64: return "V_CMPX_GT_U64";
    case eOpcode::V_CMPX_NE_U64: return "V_CMPX_NE_U64";
    case eOpcode::V_CMPX_GE_U64: return "V_CMPX_GE_U64";
    case eOpcode::V_CMPX_T_U64: return "V_CMPX_T_U64";
    default: return "UNK";
  }
}
} // namespace compiler::frontend::debug